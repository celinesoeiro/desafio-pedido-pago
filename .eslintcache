[{"C:\\Users\\celin\\Documents\\Trabalhos\\Testes\\desafio-pedido-pago\\src\\App.js":"1","C:\\Users\\celin\\Documents\\Trabalhos\\Testes\\desafio-pedido-pago\\src\\index.js":"2","C:\\Users\\celin\\Documents\\Trabalhos\\Testes\\desafio-pedido-pago\\src\\pages\\Login\\index.jsx":"3","C:\\Users\\celin\\Documents\\Trabalhos\\Testes\\desafio-pedido-pago\\src\\pages\\Categories\\index.jsx":"4","C:\\Users\\celin\\Documents\\Trabalhos\\Testes\\desafio-pedido-pago\\src\\routes\\index.js":"5","C:\\Users\\celin\\Documents\\Trabalhos\\Testes\\desafio-pedido-pago\\src\\styles\\global.js":"6","C:\\Users\\celin\\Documents\\Trabalhos\\Testes\\desafio-pedido-pago\\src\\components\\Input\\index.jsx":"7","C:\\Users\\celin\\Documents\\Trabalhos\\Testes\\desafio-pedido-pago\\src\\components\\Button\\index.jsx":"8","C:\\Users\\celin\\Documents\\Trabalhos\\Testes\\desafio-pedido-pago\\src\\components\\Toast\\index.jsx":"9","C:\\Users\\celin\\Documents\\Trabalhos\\Testes\\desafio-pedido-pago\\src\\services\\api.js":"10","C:\\Users\\celin\\Documents\\Trabalhos\\Testes\\desafio-pedido-pago\\src\\services\\auth.js":"11","C:\\Users\\celin\\Documents\\Trabalhos\\Testes\\desafio-pedido-pago\\src\\components\\Header\\index.jsx":"12","C:\\Users\\celin\\Documents\\Trabalhos\\Testes\\desafio-pedido-pago\\src\\components\\Table\\index.jsx":"13","C:\\Users\\celin\\Documents\\Trabalhos\\Testes\\desafio-pedido-pago\\src\\components\\Dialog\\index.jsx":"14","C:\\Users\\celin\\Documents\\Trabalhos\\Testes\\desafio-pedido-pago\\src\\pages\\Categories\\CreateCategory\\index.jsx":"15","C:\\Users\\celin\\Documents\\Trabalhos\\Testes\\desafio-pedido-pago\\src\\pages\\Categories\\EditCategory\\index.jsx":"16","C:\\Users\\celin\\Documents\\Trabalhos\\Testes\\desafio-pedido-pago\\src\\pages\\NotFound\\index.jsx":"17"},{"size":228,"mtime":1612275794396,"results":"18","hashOfConfig":"19"},{"size":199,"mtime":1612225649187,"results":"20","hashOfConfig":"19"},{"size":6554,"mtime":1612571218859,"results":"21","hashOfConfig":"19"},{"size":15035,"mtime":1612629345117,"results":"22","hashOfConfig":"19"},{"size":1176,"mtime":1612632056281,"results":"23","hashOfConfig":"19"},{"size":477,"mtime":1612276771078,"results":"24","hashOfConfig":"19"},{"size":2224,"mtime":1612630596226,"results":"25","hashOfConfig":"19"},{"size":1252,"mtime":1612620018195,"results":"26","hashOfConfig":"19"},{"size":1024,"mtime":1612401880024,"results":"27","hashOfConfig":"19"},{"size":385,"mtime":1612386943587,"results":"28","hashOfConfig":"19"},{"size":342,"mtime":1612391757761,"results":"29","hashOfConfig":"19"},{"size":4787,"mtime":1612451205743,"results":"30","hashOfConfig":"19"},{"size":4062,"mtime":1612576596648,"results":"31","hashOfConfig":"19"},{"size":2149,"mtime":1612550894935,"results":"32","hashOfConfig":"19"},{"size":8432,"mtime":1612572723459,"results":"33","hashOfConfig":"19"},{"size":9928,"mtime":1612623649186,"results":"34","hashOfConfig":"19"},{"size":1220,"mtime":1612632910469,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"4169tn",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"41"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\celin\\Documents\\Trabalhos\\Testes\\desafio-pedido-pago\\src\\App.js",[],["75","76","77","78","79","80"],"C:\\Users\\celin\\Documents\\Trabalhos\\Testes\\desafio-pedido-pago\\src\\index.js",[],["81","82","83","84","85","86"],"C:\\Users\\celin\\Documents\\Trabalhos\\Testes\\desafio-pedido-pago\\src\\pages\\Login\\index.jsx",[],"C:\\Users\\celin\\Documents\\Trabalhos\\Testes\\desafio-pedido-pago\\src\\pages\\Categories\\index.jsx",["87","88"],"/* eslint-disable array-callback-return */\n/* eslint-disable no-use-before-define */\n/* eslint-disable react/jsx-props-no-spreading */\n/* eslint-disable no-unused-vars */\nimport React, {\n  useState, useEffect, useMemo, useCallback,\n} from 'react';\n\n// Libs\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\nimport Typography from '@material-ui/core/Typography';\nimport Link from '@material-ui/core/Link';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TextField from '@material-ui/core/TextField';\n\n// Icons\nimport SearchIcon from '@material-ui/icons/Search';\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\nimport EditIcon from '@material-ui/icons/Edit';\nimport ClearIcon from '@material-ui/icons/Clear';\n\n// Components\nimport Toast from '../../components/Toast';\nimport Header from '../../components/Header';\nimport Input from '../../components/Input';\nimport Button from '../../components/Button';\nimport Table from '../../components/Table';\nimport Dialog from '../../components/Dialog';\n\n// Services\nimport api from '../../services/api';\n\n// Styles\nconst useStyles = makeStyles(() => (\n  {\n    root: {\n      flexGrow: 1,\n      marginBottom: '24px',\n    },\n    pageHeader: {\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      padding: '0px 25px',\n      fontFamily: 'Poppins',\n      '& >p': {\n        lineHeight: '27px',\n        justifyContent: 'flex-start',\n        fontWeight: 'bold',\n        fontSize: '18px',\n        color: '#A3A3A4',\n      },\n    },\n    pageTable: {\n      display: 'flex',\n      flexDirection: 'row',\n      padding: '0px 25px 0px 25px',\n    },\n    pageHeaderInput: {\n      display: 'flex',\n      flexDirection: 'row',\n      width: '60%',\n      justifyContent: 'flex-end',\n      alignItems: 'center',\n      '& .MuiFormControl-root': {\n        marginRight: '28px',\n        marginTop: '9px',\n      },\n    },\n    tableActions: {\n      display: 'flex',\n      flexDirection: 'row',\n      placeContent: 'space-evenly',\n    },\n    tableCategories: {\n      display: 'flex',\n      flexDirection: 'row',\n      alignItems: 'center',\n      fontFamily: 'Poppins',\n      '& span': {\n        marginLeft: '8px',\n      },\n    },\n    removeMsg: {\n      textAlign: 'center',\n    },\n    removeActions: {\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      '& button': {\n        margin: '6px 23px 21px 23px',\n      },\n    },\n    actionButtons: {\n      color: '#A3A3A4',\n    },\n    visibilityMsg: {\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'flex-start',\n      '& .MuiTypography-body1': {\n        fontFamily: 'Poppins',\n        fontSize: '12px',\n        color: '#424242',\n\n      },\n    },\n    visibilityActions: {\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'flex-end',\n      '& button': {\n        margin: '6px 23px 21px 23px',\n      },\n    },\n    container: {\n      display: 'flex',\n      flexWrap: 'wrap',\n    },\n    textField: {\n      width: '100%',\n    },\n  }\n));\n\nfunction Categories(props) {\n  const classes = useStyles();\n\n  /** STATES */\n  const [openToast, setOpenToast] = useState(false);\n  const [toastKey, setToastKey] = useState('');\n  const [toastMessage, setToastMessage] = useState('');\n  const [toastType, setToastType] = useState('info');\n\n  const [categories, setCategories] = useState([]);\n  const [categoryId, setCategoryId] = useState(null);\n  const [tableData, setTableData] = useState([]);\n\n  const [ecommerce, setEcommerce] = useState(false);\n  const [callcenter, setCallcenter] = useState(false);\n  const [ecommerceDate, setEcommerceDate] = useState(null);\n  const [callcenterDate, setCallcenterDate] = useState(null);\n\n  const [openRemoveDialog, setOpenRemoveDialog] = useState(false);\n  const [openEditDialog, setOpenEditDialog] = useState(false);\n  const [openVisibilityDialog, setOpenVisibilityDialog] = useState(false);\n\n  /** EFFECTS */\n  useEffect(() => {\n    listCategories();\n  }, []);\n\n  useEffect(() => {\n    if (categories.items) {\n      const arr = [];\n      categories.items.map((category) => {\n        const data = {\n          categoryName: <CategoryName img={category.logo} name={category.name} />,\n          createdAt: category.created_at,\n          actions: <TableButtons id={category.id} />,\n        };\n        arr.push(data);\n      });\n      setTableData(arr);\n    }\n  }, [categories]);\n\n  useEffect(() => {\n    if (categoryId) {\n      getCategory(categoryId);\n    }\n  }, [categoryId]);\n\n  /** FUNCTIONS */\n  function listCategories() {\n    api.get('/store/category')\n      .then((response) => {\n        setCategories(response.data);\n      })\n      .catch((err) => {\n        setOpenToast(true);\n        setToastType('error');\n        setToastKey(`listCategory:error:${err.name}`);\n        setToastMessage('Não foi possível listas as categorias.');\n      });\n  }\n\n  function getCategory(id) {\n    api.get(`/store/category/${id}`)\n      .then((response) => {\n        console.log('getCategory response.data', response.data);\n      })\n      .catch((err) => {\n        console.log('err', err);\n      });\n  }\n\n  function deleteCategory(id) {\n    api.delete(`/store/category/${id}`)\n      .then((response) => {\n        setOpenToast(true);\n        setToastType('success');\n        setToastKey(`deleteCategory:success:${response.data.deleted}`);\n        setToastMessage('Categoria deletada com sucesso.');\n        setOpenRemoveDialog(false);\n        listCategories();\n      })\n      .catch((err) => {\n        setOpenToast(true);\n        setToastType('error');\n        setToastKey(`deleteCategory:error:${err.name}`);\n        setToastMessage('Não foi possível deletar essa categoria. Tente novamente');\n        setOpenRemoveDialog(false);\n      });\n  }\n\n  function updateCategory(data) {\n    const { id } = data;\n    api.put(`/store/category/${id}`, {\n      callcenter: {\n        from: data.callcenterDays,\n        status: data.callcenter,\n      },\n      ecommerce: {\n        from: data.ecommerceDays,\n        status: data.ecommerce,\n      },\n    })\n      .then(() => {\n        setOpenToast(true);\n        setToastType('success');\n        setToastKey('updateCategory:success');\n        setToastMessage('Visibilidade da categoria atualizada com sucesso.');\n        setOpenVisibilityDialog(false);\n      })\n      .catch((err) => {\n        setOpenToast(true);\n        setToastType('error');\n        setToastKey(`updateCategory:error:${err.name}`);\n        setToastMessage('Não foi possível alterar a visibilidade dessa categoria. Tente novamente');\n        setOpenVisibilityDialog(false);\n      });\n  }\n\n  function handleSearchCategory() {\n    setOpenToast(true);\n    setToastKey('search');\n    setToastMessage('buscar categoria');\n    setToastType('info');\n  }\n\n  function handleVisibility(id) {\n    setCategoryId(id);\n    setOpenVisibilityDialog(true);\n  }\n\n  function handleEdit(id) {\n    setCategoryId(id);\n    props.history.push(`/category/${id}`);\n  }\n\n  function handleDelete(id) {\n    setCategoryId(id);\n    setOpenRemoveDialog(true);\n  }\n\n  function CategoryName({ img, name }) {\n    return (\n      <div className={classes.tableCategories}>\n        <img src={img} alt={name} width=\"32px\" />\n        <span>{name}</span>\n      </div>\n    );\n  }\n\n  function TableButtons({ id }) {\n    return (\n      <div className={classes.tableActions}>\n        <IconButton\n          size=\"small\"\n          onClick={() => handleVisibility(id)}\n        >\n          <VisibilityOffIcon className={classes.actionButtons} />\n        </IconButton>\n        <IconButton\n          size=\"small\"\n          onClick={() => handleEdit(id)}\n        >\n          <EditIcon className={classes.actionButtons} />\n        </IconButton>\n        <IconButton\n          size=\"small\"\n          onClick={() => handleDelete(id)}\n        >\n          <ClearIcon className={classes.actionButtons} />\n        </IconButton>\n      </div>\n    );\n  }\n\n  function handleClose(type) {\n    if (type === 'remove') {\n      setOpenRemoveDialog(false);\n    } else if (type === 'visibility') {\n      setOpenVisibilityDialog(false);\n    }\n  }\n\n  /** MEMOS */\n  const tableColumns = useMemo(\n    () => [\n      {\n        Header: 'Nome da Categoria',\n        accessor: 'categoryName',\n      },\n      {\n        Header: 'Criação',\n        accessor: 'createdAt',\n      },\n      {\n        Header: 'Ações',\n        accessor: 'actions',\n      },\n    ],\n    [],\n  );\n\n  /** CALLBACKS */\n  const handleEditCategoryVisibility = useCallback(() => {\n    const today = new Date();\n    let diffDaysEcommerce = 0;\n    let diffDaysCallcenter = 0;\n\n    if (ecommerce) {\n      const dateEcommerce = new Date(ecommerceDate);\n      const diffItimeEcommerce = Math.abs(dateEcommerce - today);\n      diffDaysEcommerce = Math.ceil(diffItimeEcommerce / (1000 * 60 * 60 * 24));\n    }\n\n    if (callcenter) {\n      const dateCallcenter = new Date(callcenterDate);\n      const diffTimeCallcenter = Math.abs(dateCallcenter - today);\n      diffDaysCallcenter = Math.ceil(diffTimeCallcenter / (1000 * 60 * 60 * 24));\n    }\n\n    const data = {\n      id: categoryId,\n      ecommerceDays: diffDaysEcommerce,\n      ecommerce,\n      callcenter,\n      callcenterDays: diffDaysCallcenter,\n    };\n\n    updateCategory(data);\n  }, [ecommerceDate, ecommerce, callcenter, callcenterDate, categoryId]);\n\n  return (\n    <div className={classes.root}>\n      <Toast\n        key={toastKey}\n        message={toastMessage}\n        type={toastType}\n        isOpen={openToast}\n      />\n      <Dialog\n        open={openRemoveDialog}\n        close={() => handleClose('remove')}\n        title=\"Remover categoria\"\n        content={(\n          <div className={classes.removeMsg}>\n            <p>\n              Tem certeza de que deseja remover a categoria\n              {' '}\n              <b>Emagrecimento</b>\n              ?\n            </p>\n            <p>Esta ação não poderá ser desfeita</p>\n          </div>\n        )}\n        actions={(\n          <div className={classes.removeActions}>\n            <Button\n              onClick={() => deleteCategory(categoryId)}\n              color=\"primary\"\n              type=\"button\"\n              variant=\"outlined\"\n              text=\"remover permanentemente\"\n              fontSize=\"14px\"\n            />\n            <Button\n              onClick={() => handleClose('remove')}\n              color=\"primary\"\n              type=\"button\"\n              variant=\"contained\"\n              text=\"manter categoria\"\n              fontSize=\"14px\"\n            />\n          </div>\n        )}\n      />\n      <Dialog\n        open={openVisibilityDialog}\n        close={() => handleClose('visibility')}\n        title=\"Alterar visibilidade\"\n        content={(\n          <div className={classes.visibilityMsg}>\n            <FormControlLabel\n              control={(\n                <Checkbox\n                  checked={ecommerce}\n                  onChange={(event) => setEcommerce(event.target.checked)}\n                  name=\"ecommerce\"\n                  color=\"primary\"\n                />\n            )}\n              label=\"Visibilidade em E-commerce a partir de:\"\n            />\n            <form className={classes.container} noValidate>\n              <TextField\n                id=\"ecommerceDate\"\n                label=\"Data\"\n                type=\"date\"\n                className={classes.textField}\n                margin=\"normal\"\n                variant=\"outlined\"\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                value={ecommerceDate}\n                onChange={(event) => setEcommerceDate(event.target.value)}\n                disabled={!ecommerce}\n              />\n            </form>\n            <FormControlLabel\n              control={(\n                <Checkbox\n                  checked={callcenter}\n                  onChange={(event) => setCallcenter(event.target.checked)}\n                  name=\"callcenter\"\n                  color=\"primary\"\n                />\n            )}\n              label=\"Visibilidade em Call center a partir de:\"\n            />\n            <form className={classes.container} noValidate>\n              <TextField\n                id=\"callcenterDate\"\n                label=\"Data\"\n                type=\"date\"\n                className={classes.textField}\n                margin=\"normal\"\n                defaultValue={null}\n                variant=\"outlined\"\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                value={callcenterDate}\n                onChange={(event) => setCallcenterDate(event.target.value)}\n                disabled={!callcenter}\n              />\n            </form>\n          </div>\n        )}\n        actions={(\n          <div className={classes.visibilityActions}>\n            <Button\n              onClick={() => handleClose('visibility')}\n              color=\"primary\"\n              type=\"button\"\n              variant=\"outlined\"\n              text=\"cancelar\"\n              fontSize=\"14px\"\n            />\n            <Button\n              onClick={handleEditCategoryVisibility}\n              color=\"primary\"\n              type=\"button\"\n              variant=\"contained\"\n              text=\"salvar\"\n              fontSize=\"14px\"\n            />\n          </div>\n        )}\n      />\n      <Header pageTitle=\"Lista de categorias\">\n        <Breadcrumbs separator=\"›\" aria-label=\"breadcrumb\">\n          <Link color=\"inherit\" variant=\"inherit\" href=\"/categories\">\n            Catálogo\n          </Link>\n          <Typography color=\"inherit\" variant=\"inherit\">Categorias</Typography>\n        </Breadcrumbs>\n      </Header>\n      <Grid\n        container\n        direction=\"column\"\n        alignContent=\"stretch\"\n      >\n        <div className={classes.pageHeader}>\n          <p>Lista de Categorias</p>\n          <div className={classes.pageHeaderInput}>\n            <Input\n              borderRadius=\"90px\"\n              width=\"362px\"\n              height=\"40px\"\n              fontSize=\"12px\"\n              icon={<SearchIcon color=\"primary\" />}\n              inputIconButtonFunction={handleSearchCategory}\n              label=\"buscar categoria\"\n              variant=\"outlined\"\n              margin=\"dense\"\n              fullWidth\n              size=\"small\"\n            />\n            <Button\n              type=\"button\"\n              variant=\"contained\"\n              color=\"primary\"\n              fullWidth\n              text=\"criar nova categoria\"\n              fontSize=\"14px\"\n              onClick={() => props.history.push('/new-category')}\n            />\n          </div>\n        </div>\n        <div className={classes.pageTable}>\n          <Table columns={tableColumns} data={tableData} />\n        </div>\n      </Grid>\n    </div>\n  );\n}\n\nexport default Categories;\n","C:\\Users\\celin\\Documents\\Trabalhos\\Testes\\desafio-pedido-pago\\src\\routes\\index.js",[],"C:\\Users\\celin\\Documents\\Trabalhos\\Testes\\desafio-pedido-pago\\src\\styles\\global.js",[],"C:\\Users\\celin\\Documents\\Trabalhos\\Testes\\desafio-pedido-pago\\src\\components\\Input\\index.jsx",[],"C:\\Users\\celin\\Documents\\Trabalhos\\Testes\\desafio-pedido-pago\\src\\components\\Button\\index.jsx",[],"C:\\Users\\celin\\Documents\\Trabalhos\\Testes\\desafio-pedido-pago\\src\\components\\Toast\\index.jsx",[],"C:\\Users\\celin\\Documents\\Trabalhos\\Testes\\desafio-pedido-pago\\src\\services\\api.js",[],"C:\\Users\\celin\\Documents\\Trabalhos\\Testes\\desafio-pedido-pago\\src\\services\\auth.js",[],"C:\\Users\\celin\\Documents\\Trabalhos\\Testes\\desafio-pedido-pago\\src\\components\\Header\\index.jsx",[],["89","90","91","92","93","94"],"C:\\Users\\celin\\Documents\\Trabalhos\\Testes\\desafio-pedido-pago\\src\\components\\Table\\index.jsx",[],"C:\\Users\\celin\\Documents\\Trabalhos\\Testes\\desafio-pedido-pago\\src\\components\\Dialog\\index.jsx",[],"C:\\Users\\celin\\Documents\\Trabalhos\\Testes\\desafio-pedido-pago\\src\\pages\\Categories\\CreateCategory\\index.jsx",["95"],"/* eslint-disable jsx-a11y/label-has-associated-control */\n/* eslint-disable no-use-before-define */\n/* eslint-disable react/jsx-props-no-spreading */\n/* eslint-disable no-unused-vars */\nimport React, { useState, useEffect, useCallback } from 'react';\n\n// Libs\nimport { makeStyles, ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\nimport Typography from '@material-ui/core/Typography';\nimport Link from '@material-ui/core/Link';\nimport Card from '@material-ui/core/Card';\nimport IconButton from '@material-ui/core/IconButton';\nimport Avatar from '@material-ui/core/Avatar';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { lighten, darken } from 'polished';\nimport MuiInput from '@material-ui/core/Input';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\n\n// Services\nimport api from '../../../services/api';\n\n// Components\nimport Header from '../../../components/Header';\nimport Input from '../../../components/Input';\nimport Button from '../../../components/Button';\nimport Toast from '../../../components/Toast';\n\n// Styles\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      light: lighten(0.1, '#22E0A1'),\n      main: '#22E0A1',\n      dark: darken(0.1, '#22E0A1'),\n      contrastText: '#fff',\n    },\n  },\n});\n\nconst useStyles = makeStyles(() => (\n  {\n    root: {\n      flexGrow: 1,\n    },\n    card: {\n      margin: '15px 25px 15px 25px',\n      padding: '26px',\n    },\n    input: {\n      display: 'none',\n    },\n    avatar: {\n      display: 'flex',\n      placeContent: 'center',\n    },\n  }\n));\n\nfunction CreateCategory(props) {\n  const classes = useStyles();\n\n  /** STATES */\n  const [logo, setLogo] = useState(null);\n  const [name, setName] = useState(null);\n  const [description, setDescription] = useState(null);\n  const [ecommerce, setEcommerce] = useState(null);\n  const [callCenter, setCallCenter] = useState(null);\n  const [keywords, setKeywords] = useState(null);\n  const [nameError, setNameError] = useState(false);\n\n  const [openToast, setOpenToast] = useState(false);\n  const [toastKey, setToastKey] = useState('');\n  const [toastMessage, setToastMessage] = useState('');\n  const [toastType, setToastType] = useState('info');\n\n  /** FUNCTIONS */\n  function createCategory(data) {\n    console.log('data', data);\n\n    api.post('/store/category', {\n      callcenter: {\n        from: 0,\n        status: data.callCenter,\n      },\n      description: data.description,\n      ecommerce: {\n        from: 0,\n        status: data.ecommerce,\n      },\n      keywords_concat: data.keywords,\n      logo: data.logo,\n      name: data.name,\n    })\n      .then((response) => {\n        setOpenToast(true);\n        setToastType('success');\n        setToastKey(`categoryCreated:id:${response.data.id}`);\n        setToastMessage('Categoria cadastrada com sucesso! Você será redirecionado para a lista de categorias.');\n        setTimeout(() => {\n          props.history.push('/categories');\n        }, [3000]);\n      })\n      .catch((err) => {\n        setOpenToast(true);\n        setToastType('error');\n        setToastKey(`categoryCreated:error:${err.name}`);\n        setToastMessage('Não foi possível cadastrar a categoria. Tente novamente.');\n      });\n  }\n\n  function handleAddImg(e) {\n    const reader = new FileReader();\n    reader.onload = () => {\n      if (reader.readyState === 2) {\n        setLogo(reader.result);\n      }\n    };\n    reader.readAsDataURL(e.target.files[0]);\n  }\n\n  /** CALLBACKS */\n  const handleSubmit = useCallback(() => {\n    if (!name) {\n      setNameError(true);\n    } else {\n      const data = {\n        logo,\n        name,\n        description,\n        ecommerce,\n        callCenter,\n        keywords,\n      };\n\n      createCategory(data);\n    }\n  }, [logo, name, description, ecommerce, callCenter, keywords]);\n\n  return (\n    <>\n      <Toast\n        key={toastKey}\n        message={toastMessage}\n        type={toastType}\n        isOpen={openToast}\n      />\n      <ThemeProvider theme={theme}>\n        <Header pageTitle=\"Gerenciar categoria\">\n          <Breadcrumbs separator=\"›\">\n            <Link color=\"inherit\" variant=\"inherit\" href=\"/categories\">\n              Catálogo\n            </Link>\n            <Link color=\"inherit\" variant=\"inherit\" href=\"/categories\">\n              Categorias\n            </Link>\n            <Typography color=\"inherit\" variant=\"inherit\">Nova Categoria</Typography>\n          </Breadcrumbs>\n        </Header>\n        <Grid\n          container\n          direction=\"column\"\n          alignContent=\"stretch\"\n        >\n          <Card className={classes.card} variant=\"outlined\">\n            <Grid container>\n              <Grid item xs={3} className={classes.avatar}>\n                <label>\n                  <MuiInput\n                    type=\"file\"\n                    inputProps={{\n                      accept: 'image/*',\n                    }}\n                    onChange={handleAddImg}\n                    className={classes.input}\n                  />\n                  <IconButton component=\"span\">\n                    <Avatar\n                      src={logo}\n                      style={{\n                        margin: '10px',\n                        width: '120px',\n                        height: '120px',\n                      }}\n                    />\n                  </IconButton>\n                </label>\n\n              </Grid>\n              <Grid item xs>\n                <Input\n                  height=\"40px\"\n                  fontSize=\"12px\"\n                  label=\"Nome da categoria\"\n                  variant=\"outlined\"\n                  margin=\"dense\"\n                  fullWidth\n                  size=\"small\"\n                  value={name}\n                  onChange={(event) => setName(event.target.value)}\n                  error={nameError}\n                  errorMessage=\"O campo Nome da categoria é obrigatório\"\n                />\n                <Input\n                  height=\"40px\"\n                  fontSize=\"12px\"\n                  label=\"Descrição\"\n                  variant=\"outlined\"\n                  margin=\"dense\"\n                  fullWidth\n                  size=\"small\"\n                  value={description}\n                  onChange={(event) => setDescription(event.target.value)}\n                />\n                <Input\n                  height=\"40px\"\n                  fontSize=\"12px\"\n                  label=\"Palavras chave\"\n                  variant=\"outlined\"\n                  margin=\"dense\"\n                  fullWidth\n                  size=\"small\"\n                  value={keywords}\n                  onChange={(event) => setKeywords(event.target.value)}\n                />\n                <FormControl component=\"fieldset\">\n                  <FormLabel component=\"legend\">Visível em: </FormLabel>\n                  <FormGroup row>\n                    <FormControlLabel\n                      control={(\n                        <Checkbox\n                          checked={ecommerce}\n                          onChange={(event) => setEcommerce(event.target.checked)}\n                          name=\"ecommerce\"\n                          color=\"primary\"\n                        />\n                    )}\n                      label=\"E-commerce\"\n                    />\n                    <FormControlLabel\n                      control={(\n                        <Checkbox\n                          checked={callCenter}\n                          onChange={(event) => setCallCenter(event.target.checked)}\n                          name=\"callCenter\"\n                          color=\"primary\"\n                        />\n                    )}\n                      label=\"Call center\"\n                    />\n                  </FormGroup>\n                </FormControl>\n                <Button\n                  type=\"button\"\n                  // fullWidth\n                  variant=\"contained\"\n                  color=\"primary\"\n                  text=\"Cadastrar nova categoria\"\n                  onClick={handleSubmit}\n                />\n              </Grid>\n            </Grid>\n          </Card>\n        </Grid>\n      </ThemeProvider>\n    </>\n  );\n}\n\nexport default CreateCategory;\n","C:\\Users\\celin\\Documents\\Trabalhos\\Testes\\desafio-pedido-pago\\src\\pages\\Categories\\EditCategory\\index.jsx",[],"C:\\Users\\celin\\Documents\\Trabalhos\\Testes\\desafio-pedido-pago\\src\\pages\\NotFound\\index.jsx",[],{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"96","replacedBy":"108"},{"ruleId":"98","replacedBy":"109"},{"ruleId":"100","replacedBy":"110"},{"ruleId":"102","replacedBy":"111"},{"ruleId":"104","replacedBy":"112"},{"ruleId":"106","replacedBy":"113"},{"ruleId":"114","severity":1,"message":"115","line":197,"column":9,"nodeType":"116","messageId":"117","endLine":197,"endColumn":20},{"ruleId":"114","severity":1,"message":"115","line":200,"column":9,"nodeType":"116","messageId":"117","endLine":200,"endColumn":20},{"ruleId":"96","replacedBy":"118"},{"ruleId":"98","replacedBy":"119"},{"ruleId":"100","replacedBy":"120"},{"ruleId":"102","replacedBy":"121"},{"ruleId":"104","replacedBy":"122"},{"ruleId":"106","replacedBy":"123"},{"ruleId":"114","severity":1,"message":"115","line":83,"column":5,"nodeType":"116","messageId":"117","endLine":83,"endColumn":16},"lines-around-directive",["124"],"no-spaced-func",["125"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],["124"],["125"],[],[],[],[],"no-console","Unexpected console statement.","MemberExpression","unexpected",["124"],["125"],[],[],[],[],"padding-line-between-statements","func-call-spacing"]